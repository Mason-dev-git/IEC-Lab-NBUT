<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SMART_CAR\SMART_CAR.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SMART_CAR\SMART_CAR.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jul 29 22:52:14 2025
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[cf]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[8f]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">StartDefaultTask</a><BR>
 <LI><a href="#[92]">StartHardware_Handle</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">StartHardware_Handle</a><BR>
 <LI><a href="#[90]">StartLCD_Show</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[90]">StartLCD_Show</a><BR>
 <LI><a href="#[91]">StartRobot_Run</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">StartRobot_Run</a><BR>
 <LI><a href="#[12f]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8b]">ADC_DMAConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[8d]">ADC_DMAError</a> from stm32f7xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[8c]">ADC_DMAHalfConvCplt</a> from stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2e]">CAN1_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2d]">CAN1_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5a]">CAN2_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5c]">CAN2_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[59]">CAN2_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[81]">CAN3_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[82]">CAN3_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[83]">CAN3_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[80]">CAN3_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[77]">CEC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[68]">DCMI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7b]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7c]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7d]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7e]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[49]">DMA1_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[73]">DMA2D_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[57]">ETH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[58]">ETH_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4a]">FMC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[63]">I2C3_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[62]">I2C3_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[79]">I2C4_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[78]">I2C4_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[84]">JPEG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[76]">LPTIM1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[72]">LTDC_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[71]">LTDC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[85]">MDIOS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5d]">OTG_FS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[44]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[75]">QUADSPI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[69]">RNG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[70]">SAI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[74]">SAI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4b]">SDMMC1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7a]">SPDIF_RX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6d]">SPI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6e]">SPI5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6f]">SPI6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8f]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[92]">StartHardware_Handle</a> from freertos.o(i.StartHardware_Handle) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[90]">StartLCD_Show</a> from freertos.o(i.StartLCD_Show) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[91]">StartRobot_Run</a> from freertos.o(i.StartRobot_Run) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[19]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[1c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[33]">TIM1_UP_TIM10_IRQHandler</a> from stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from stm32f7xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from stm32f7xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from stm32f7xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[50]">TIM6_DAC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[51]">TIM7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[45]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[48]">TIM8_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[47]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[46]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4e]">UART4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6b]">UART7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6c]">UART8_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8e]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[94]">UART_RxISR_16BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[93]">UART_RxISR_8BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from stm32f7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from stm32f7xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[61]">USART6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[95]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[96]">PatrolLine::~PatrolLine()</a> from patrolline.o(i._ZN10PatrolLineD1Ev) referenced from pack.o(i.__sti___8_pack_cpp_807a1116)
 <LI><a href="#[9a]">PID_POSITIONAL::~PID_POSITIONAL()</a> from pid_positional.o(i._ZN14PID_POSITIONALD1Ev) referenced from pack.o(i.__sti___8_pack_cpp_807a1116)
 <LI><a href="#[99]">Distance_patrol::~Distance_patrol()</a> from distance_patrol.o(i._ZN15Distance_patrolD1Ev) referenced from pack.o(i.__sti___8_pack_cpp_807a1116)
 <LI><a href="#[8a]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[98]">Motor::~Motor()</a> from motor.o(i._ZN5MotorD1Ev) referenced from pack.o(i.__sti___8_pack_cpp_807a1116)
 <LI><a href="#[98]">Motor::~Motor()</a> from motor.o(i._ZN5MotorD1Ev) referenced from test.o(i.__sti___8_test_cpp_motor123)
 <LI><a href="#[97]">Encoder::~Encoder()</a> from encoder.o(i._ZN7EncoderD1Ev) referenced from pack.o(i.__sti___8_pack_cpp_807a1116)
 <LI><a href="#[a1]">__main</a> from __main.o(!!!main) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[9e]">__sti___14_PatrolLine_cpp_ad_now</a> from patrolline.o(i.__sti___14_PatrolLine_cpp_ad_now) referenced from patrolline.o(.init_array)
 <LI><a href="#[9f]">__sti___8_pack_cpp_807a1116</a> from pack.o(i.__sti___8_pack_cpp_807a1116) referenced from pack.o(.init_array)
 <LI><a href="#[a0]">__sti___8_test_cpp_motor123</a> from test.o(i.__sti___8_test_cpp_motor123) referenced from test.o(.init_array)
 <LI><a href="#[89]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[88]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[9c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[9b]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[9d]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a1]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[212]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[213]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[214]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[a9]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[215]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[216]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[217]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[218]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[219]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[21a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[220]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[221]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[222]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[223]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[224]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[225]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[226]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[227]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[228]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[229]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[22a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[22b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[22d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[22e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[230]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ae]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[231]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[232]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[233]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[209]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[202]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[235]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_motor123
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[bf]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[236]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[239]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[be]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[bd]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[bb]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[88]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c2]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[23e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[23f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[240]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ca]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[aa]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[cc]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[c5]"></a>__printf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, __printf_nopercent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[95]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[af]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c9]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cb]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[cd]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[242]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[d2]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d1]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d3]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[b8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[d7]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[d6]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[d5]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[d8]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[245]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[da]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[df]"></a>Gyroscope_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wt901c.o(i.Gyroscope_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Gyroscope_Init &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
</UL>

<P><STRONG><a name="[e2]"></a>Gyroscope_Start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wt901c.o(i.Gyroscope_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Gyroscope_Start &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Hardware_Handler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[dd]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[db]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[e4]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Init()
</UL>

<P><STRONG><a name="[ed]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_DMA_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[ec]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[e1]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_if_white(unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyroscope_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_GPIO_Init</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Device()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::toggle()
</UL>

<P><STRONG><a name="[144]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCom
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write16Data
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::Close()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::Open()
</UL>

<P><STRONG><a name="[ee]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[12d]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[f2]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>HAL_InitTick</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[148]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[14a]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[f5]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fb]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[f3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[178]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1336 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f6]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1078 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[105]"></a>HAL_SPI_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[107]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCom
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write16Data
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Encoder_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Encoder_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Init()
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Encoder_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_Encoder_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Disable_Clean()
</UL>

<P><STRONG><a name="[116]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Enable()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Enable()
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Disable()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Disable()
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[133]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[12e]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 688 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_UART_MspInit</STRONG> (Thumb, 338 bytes, Stack size 200 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyroscope_Start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
</UL>

<P><STRONG><a name="[13b]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UART_Transmit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyroscope_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[13e]"></a>LCD_Address_Set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCom
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write16Data
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[141]"></a>LCD_DrawPoint</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write16Data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[142]"></a>LCD_Fill</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write16Data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[143]"></a>LCD_Init</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD_Init &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCom
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
</UL>

<P><STRONG><a name="[146]"></a>LCD_ShowChar</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write16Data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[13c]"></a>LCD_ShowString</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[140]"></a>LCD_Write16Data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd.o(i.LCD_Write16Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Write16Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[13f]"></a>LCD_WriteCom</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd.o(i.LCD_WriteCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[145]"></a>LCD_WriteData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd.o(i.LCD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_WriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[14b]"></a>MX_ADC1_Init</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>MX_GPIO_Init</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>MX_SPI1_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>MX_TIM2_Init</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>MX_TIM3_Init</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_TIM4_Init</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MX_TIM5_Init</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>Pack_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pack.o(i.Pack_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Pack_Init &rArr; LCD_Init &rArr; LCD_Fill &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Init()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Init()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetcompareAD(unsigned char, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyroscope_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>PatrolLineTest</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, pack.o(i.PatrolLineTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = PatrolLineTest &rArr; Robot_Start() &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRobot_Run
</UL>

<P><STRONG><a name="[8f]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[92]"></a>StartHardware_Handle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartHardware_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = StartHardware_Handle &rArr;  StartHardware_Handle (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Hardware_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHardware_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHardware_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[90]"></a>StartLCD_Show</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartLCD_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartLCD_Show &rArr;  StartLCD_Show (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLCD_Show
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLCD_Show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[91]"></a>StartRobot_Run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartRobot_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = StartRobot_Run &rArr;  StartRobot_Run (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRobot_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRobot_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>SystemClock_Config</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[113]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
</UL>

<P><STRONG><a name="[10c]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[121]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[137]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[139]"></a>UART_CheckIdleState</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[138]"></a>UART_SetConfig</STRONG> (Thumb, 648 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13a]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[13d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>Robot_Start()</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, pack.o(i._Z11Robot_Startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Robot_Start() &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::Close()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::Open()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[17d]"></a>Check_Device()</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, pack.o(i._Z12Check_Devicev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Check_Device() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Hardware_Handler
</UL>

<P><STRONG><a name="[16d]"></a>Robot_Start_2()</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, pack.o(i._Z13Robot_Start_2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Robot_Start_2() &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::Close()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::Open()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[17e]"></a>Robot_Hit_Spot()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, pack.o(i._Z14Robot_Hit_Spotv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Robot_Hit_Spot() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Back_WhiteStraight(short, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
</UL>

<P><STRONG><a name="[187]"></a>Color_stop_terrace(unsigned)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pack.o(i._Z18Color_stop_terracej))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Color_stop_terrace(unsigned) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
</UL>

<P><STRONG><a name="[168]"></a>Robot_loc_5to_loc7()</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, pack.o(i._Z18Robot_loc_5to_loc7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Robot_loc_5to_loc7() &rArr; Robot_Precipice_to_loc_7() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[18e]"></a>Change_dir_Pid_Left(float, unsigned char)</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, pack.o(i._Z19Change_dir_Pid_Leftfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Change_dir_Pid_Left(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Calculate(float)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Init(float, float, float)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
</UL>

<P><STRONG><a name="[166]"></a>Robot_loc_3to_door1()</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, pack.o(i._Z19Robot_loc_3to_door1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Robot_loc_3to_door1() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[194]"></a>Change_dir_Pid_Right(float, unsigned char)</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, pack.o(i._Z20Change_dir_Pid_Rightfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Calculate(float)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Init(float, float, float)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
</UL>

<P><STRONG><a name="[170]"></a>Robot_door1_to_door2()</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, pack.o(i._Z20Robot_door1_to_door2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Robot_door1_to_door2() &rArr; Change_dir_Pid_Left(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Back_WhiteStraight(short, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[167]"></a>Robot_door1_to_loc_5()</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, pack.o(i._Z20Robot_door1_to_loc_5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Robot_door1_to_loc_5() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[171]"></a>Robot_door2_to_loc_5()</STRONG> (Thumb, 802 bytes, Stack size 64 bytes, pack.o(i._Z20Robot_door2_to_loc_5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Robot_door2_to_loc_5() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[163]"></a>Robot_loc_1_to_loc_2()</STRONG> (Thumb, 1134 bytes, Stack size 40 bytes, pack.o(i._Z20Robot_loc_1_to_loc_2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Robot_loc_1_to_loc_2() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect2(short, int, int, int)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Value_Handling()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::toggle()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[164]"></a>Robot_loc_2_to_loc_4()</STRONG> (Thumb, 844 bytes, Stack size 56 bytes, pack.o(i._Z20Robot_loc_2_to_loc_4v))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Robot_loc_2_to_loc_4() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[165]"></a>Robot_loc_4_to_loc_3()</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, pack.o(i._Z20Robot_loc_4_to_loc_3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Robot_loc_4_to_loc_3() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[169]"></a>Robot_loc_7_to_loc_8()</STRONG> (Thumb, 690 bytes, Stack size 40 bytes, pack.o(i._Z20Robot_loc_7_to_loc_8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Robot_loc_7_to_loc_8() &rArr; Change_dir_Pid_Left(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[16c]"></a>Robot_HomePoint2_to_Home()</STRONG> (Thumb, 1318 bytes, Stack size 40 bytes, pack.o(i._Z24Robot_HomePoint2_to_Homev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Robot_HomePoint2_to_Home() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect2(short, int, int, int)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[18f]"></a>Robot_Precipice_to_loc_7()</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, pack.o(i._Z24Robot_Precipice_to_loc_7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Robot_Precipice_to_loc_7() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
</UL>

<P><STRONG><a name="[16a]"></a>Robot_loc_8_to_HomePoint1()</STRONG> (Thumb, 1274 bytes, Stack size 48 bytes, pack.o(i._Z25Robot_loc_8_to_HomePoint1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Robot_loc_8_to_HomePoint1() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Back_WhiteStraight(short, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_if_white(unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[172]"></a>Robot_door2_to_door4_to_loc_5()</STRONG> (Thumb, 1208 bytes, Stack size 88 bytes, pack.o(i._Z29Robot_door2_to_door4_to_loc_5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Robot_door2_to_door4_to_loc_5() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Back_WhiteStraight(short, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[16b]"></a>Robot_HomePoint1_to_HomePoint2()</STRONG> (Thumb, 2234 bytes, Stack size 96 bytes, pack.o(i._Z30Robot_HomePoint1_to_HomePoint2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Robot_HomePoint1_to_HomePoint2() &rArr; Change_dir_Pid_Right(float, unsigned char) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::set_yaw_compensation()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::ad_compensation()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
</UL>

<P><STRONG><a name="[199]"></a>Left_motor::Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, left_motor.o(i._ZN10Left_motor4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Left_motor::Init() &rArr; Left_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Disable()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Control(Left_motor_Status)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
</UL>

<P><STRONG><a name="[19c]"></a>Left_motor::Speed(short)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, left_motor.o(i._ZN10Left_motor5SpeedEs))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Control(Left_motor_Status)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
</UL>

<P><STRONG><a name="[19d]"></a>Left_motor::Enable()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, left_motor.o(i._ZN10Left_motor6EnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Left_motor::Enable() &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
</UL>

<P><STRONG><a name="[19b]"></a>Left_motor::Control(Left_motor_Status)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, left_motor.o(i._ZN10Left_motor7ControlE17Left_motor_Status))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Speed(short)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Init()
</UL>

<P><STRONG><a name="[19a]"></a>Left_motor::Disable()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, left_motor.o(i._ZN10Left_motor7DisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Left_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Init()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Disable()
</UL>

<P><STRONG><a name="[1c3]"></a>Left_motor::Left_motor()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, left_motor.o(i._ZN10Left_motorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[247]"></a>Left_motor::Left_motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, left_motor.o(i._ZN10Left_motorC1Ev), UNUSED)

<P><STRONG><a name="[1c6]"></a>Left_motor::~Left_motor()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, left_motor.o(i._ZN10Left_motorD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::~Motor()
</UL>

<P><STRONG><a name="[248]"></a>Left_motor::~Left_motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, left_motor.o(i._ZN10Left_motorD1Ev), UNUSED)

<P><STRONG><a name="[198]"></a>PatrolLine::ad_if_white(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, patrolline.o(i._ZN10PatrolLine11ad_if_whiteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PatrolLine::ad_if_white(unsigned char) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
</UL>

<P><STRONG><a name="[17f]"></a>PatrolLine::SetPID_Kp_Kd(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine12SetPID_Kp_KdEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PatrolLine::SetPID_Kp_Kd(float, float) &rArr; pid::Set_Kp_Kd(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::Set_Kp_Kd(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[160]"></a>PatrolLine::SetcompareAD(unsigned char, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine12SetcompareADEhh))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
</UL>

<P><STRONG><a name="[1a0]"></a>PatrolLine::Get_error_yaw()</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine13Get_error_yawEv))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
</UL>

<P><STRONG><a name="[195]"></a>PatrolLine::Value_Handling()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, patrolline.o(i._ZN10PatrolLine14Value_HandlingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PatrolLine::Value_Handling()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
</UL>

<P><STRONG><a name="[1a5]"></a>PatrolLine::Get_ADmin_error()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLine15Get_ADmin_errorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PatrolLine::Get_ADmin_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Get_Compensation_error()
</UL>

<P><STRONG><a name="[180]"></a>PatrolLine::ad_compensation()</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine15ad_compensationEv))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[184]"></a>PatrolLine::SetPID_Kp_Kd_yaw(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine16SetPID_Kp_Kd_yawEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PatrolLine::SetPID_Kp_Kd_yaw(float, float) &rArr; PID_INCREMENTAL::Set_Kp_Kd_yaw(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Set_Kp_Kd_yaw(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[185]"></a>PatrolLine::Yaw_Compensation()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLine16Yaw_CompensationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PatrolLine::Yaw_Compensation() &rArr; PID_INCREMENTAL::Calculate_yaw(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Calculate_yaw(float)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Get_error_yaw()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[181]"></a>PatrolLine::Calcu_Compensation()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLine18Calcu_CompensationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PatrolLine::Calcu_Compensation() &rArr; PatrolLine::Get_Compensation_error() &rArr; PatrolLine::Get_error()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Calculate(float)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Get_Compensation_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[183]"></a>PatrolLine::set_yaw_compensation()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine20set_yaw_compensationEv))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[1a2]"></a>PatrolLine::Get_Compensation_error()</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, patrolline.o(i._ZN10PatrolLine22Get_Compensation_errorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PatrolLine::Get_Compensation_error() &rArr; PatrolLine::Get_error()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Get_error()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Get_ADmin_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
</UL>

<P><STRONG><a name="[15f]"></a>PatrolLine::Init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, patrolline.o(i._ZN10PatrolLine4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PatrolLine::Init() &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
</UL>

<P><STRONG><a name="[1a4]"></a>PatrolLine::Get_error()</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, patrolline.o(i._ZN10PatrolLine9Get_errorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PatrolLine::Get_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Get_Compensation_error()
</UL>

<P><STRONG><a name="[1a6]"></a>PatrolLine::PatrolLine()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PatrolLine::PatrolLine() &rArr; PID_INCREMENTAL::PID_INCREMENTAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::PID_INCREMENTAL()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
</UL>

<P><STRONG><a name="[249]"></a>PatrolLine::PatrolLine__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLineC1Ev), UNUSED)

<P><STRONG><a name="[96]"></a>PatrolLine::~PatrolLine()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLineD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PatrolLine::~PatrolLine()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::~PID_INCREMENTAL()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack.o(i.__sti___8_pack_cpp_807a1116)
</UL>
<P><STRONG><a name="[24a]"></a>PatrolLine::~PatrolLine__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, patrolline.o(i._ZN10PatrolLineD1Ev), UNUSED)

<P><STRONG><a name="[1a9]"></a>Right_motor::Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, right_motor.o(i._ZN11Right_motor4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Right_motor::Init() &rArr; Right_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Disable()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Control(Right_motor_Status)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
</UL>

<P><STRONG><a name="[1ac]"></a>Right_motor::Speed(short)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, right_motor.o(i._ZN11Right_motor5SpeedEs))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Control(Right_motor_Status)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
</UL>

<P><STRONG><a name="[1ad]"></a>Right_motor::Enable()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, right_motor.o(i._ZN11Right_motor6EnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Right_motor::Enable() &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Enable()
</UL>

<P><STRONG><a name="[1ab]"></a>Right_motor::Control(Right_motor_Status)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, right_motor.o(i._ZN11Right_motor7ControlE18Right_motor_Status))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Speed(short)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Init()
</UL>

<P><STRONG><a name="[1aa]"></a>Right_motor::Disable()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, right_motor.o(i._ZN11Right_motor7DisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Right_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Init()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Disable()
</UL>

<P><STRONG><a name="[1c4]"></a>Right_motor::Right_motor()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, right_motor.o(i._ZN11Right_motorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[24b]"></a>Right_motor::Right_motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, right_motor.o(i._ZN11Right_motorC1Ev), UNUSED)

<P><STRONG><a name="[1c5]"></a>Right_motor::~Right_motor()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, right_motor.o(i._ZN11Right_motorD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::~Motor()
</UL>

<P><STRONG><a name="[24c]"></a>Right_motor::~Right_motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, right_motor.o(i._ZN11Right_motorD1Ev), UNUSED)

<P><STRONG><a name="[1b1]"></a>PID_POSITIONAL::Clear_i_out()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL11Clear_i_outEv))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Init(float, float, float)
</UL>

<P><STRONG><a name="[191]"></a>PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, pid_positional.o(i._ZN14PID_POSITIONAL12Set_Kp_Ki_KdEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp(float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Ki(float)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kd(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_Kp_Ki_Kd(float, float, float)
</UL>

<P><STRONG><a name="[1b4]"></a>PID_POSITIONAL::Set_MaxOutput(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL13Set_MaxOutputEf))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Set_MaxOutput(float)
</UL>

<P><STRONG><a name="[190]"></a>PID_POSITIONAL::Init(float, float, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL4InitEfff))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Clear_i_out()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init(float, float, float)
</UL>

<P><STRONG><a name="[1b2]"></a>PID_POSITIONAL::limit(float*, float)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL5limitEPff))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Calculate(float)
</UL>

<P><STRONG><a name="[1b0]"></a>PID_POSITIONAL::Set_Kd(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL6Set_KdEf))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>

<P><STRONG><a name="[1af]"></a>PID_POSITIONAL::Set_Ki(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL6Set_KiEf))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>

<P><STRONG><a name="[1ae]"></a>PID_POSITIONAL::Set_Kp(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONAL6Set_KpEf))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>

<P><STRONG><a name="[192]"></a>PID_POSITIONAL::Calculate(float)</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, pid_positional.o(i._ZN14PID_POSITIONAL9CalculateEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_POSITIONAL::Calculate(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::limit(float*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
</UL>

<P><STRONG><a name="[1b9]"></a>PID_POSITIONAL::PID_POSITIONAL()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONALC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Distance_patrol()
</UL>

<P><STRONG><a name="[24d]"></a>PID_POSITIONAL::PID_POSITIONAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONALC1Ev), UNUSED)

<P><STRONG><a name="[9a]"></a>PID_POSITIONAL::~PID_POSITIONAL()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONALD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::~Distance_patrol()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack.o(i.__sti___8_pack_cpp_807a1116)
</UL>
<P><STRONG><a name="[24e]"></a>PID_POSITIONAL::~PID_POSITIONAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid_positional.o(i._ZN14PID_POSITIONALD1Ev), UNUSED)

<P><STRONG><a name="[18b]"></a>Distance_patrol::Set_Kp_Ki_Kd(float, float, float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, distance_patrol.o(i._ZN15Distance_patrol12Set_Kp_Ki_KdEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Distance_patrol::Set_Kp_Ki_Kd(float, float, float) &rArr; PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_Kp_Ki_Kd(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
</UL>

<P><STRONG><a name="[18a]"></a>Distance_patrol::Move_Distance(int, float, float)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, distance_patrol.o(i._ZN15Distance_patrol13Move_DistanceEiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Distance_patrol::Move_Distance(int, float, float) &rArr; Encoder::Encoder_Init() &rArr; HAL_TIM_Encoder_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Init()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
</UL>

<P><STRONG><a name="[18c]"></a>Distance_patrol::Set_MaxOutput(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, distance_patrol.o(i._ZN15Distance_patrol13Set_MaxOutputEf))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Set_MaxOutput(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
</UL>

<P><STRONG><a name="[18d]"></a>Distance_patrol::Get_CalculateSpeed()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, distance_patrol.o(i._ZN15Distance_patrol18Get_CalculateSpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Distance_patrol::Get_CalculateSpeed() &rArr; Encoder::Encoder_Disable_Clean() &rArr; HAL_TIM_Encoder_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Get_CaptureRightCount()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Disable_Clean()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Calculate(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
</UL>

<P><STRONG><a name="[189]"></a>Distance_patrol::Run_Right_Distance(int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, distance_patrol.o(i._ZN15Distance_patrol18Run_Right_DistanceEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Distance_patrol::Run_Right_Distance(int) &rArr; Motor::Disable() &rArr; Right_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Disable()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Get_CaptureRightCount()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Disable_Clean()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
</UL>

<P><STRONG><a name="[1b3]"></a>Distance_patrol::Init(float, float, float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, distance_patrol.o(i._ZN15Distance_patrol4InitEfff))
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::Init(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
</UL>

<P><STRONG><a name="[188]"></a>Distance_patrol::Init()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, distance_patrol.o(i._ZN15Distance_patrol4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Distance_patrol::Init() &rArr; Encoder::Encoder_Init() &rArr; HAL_TIM_Encoder_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
</UL>

<P><STRONG><a name="[1b8]"></a>Distance_patrol::Distance_patrol()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, distance_patrol.o(i._ZN15Distance_patrolC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Distance_patrol::Distance_patrol() &rArr; Motor::Motor()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::PID_POSITIONAL()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
</UL>

<P><STRONG><a name="[24f]"></a>Distance_patrol::Distance_patrol__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, distance_patrol.o(i._ZN15Distance_patrolC1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>Distance_patrol::~Distance_patrol()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, distance_patrol.o(i._ZN15Distance_patrolD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Distance_patrol::~Distance_patrol() &rArr; Motor::~Motor()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::~Motor()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::~Encoder()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::~PID_POSITIONAL()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack.o(i.__sti___8_pack_cpp_807a1116)
</UL>
<P><STRONG><a name="[250]"></a>Distance_patrol::~Distance_patrol__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, distance_patrol.o(i._ZN15Distance_patrolD1Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>PID_INCREMENTAL::Set_Kd_yaw(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_incremental.o(i._ZN15PID_INCREMENTAL10Set_Kd_yawEf))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Set_Kp_Kd_yaw(float, float)
</UL>

<P><STRONG><a name="[1bd]"></a>PID_INCREMENTAL::Set_Kp_yaw(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_incremental.o(i._ZN15PID_INCREMENTAL10Set_Kp_yawEf))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Set_Kp_Kd_yaw(float, float)
</UL>

<P><STRONG><a name="[1a1]"></a>PID_INCREMENTAL::Calculate_yaw(float)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pid_incremental.o(i._ZN15PID_INCREMENTAL13Calculate_yawEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_INCREMENTAL::Calculate_yaw(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::limit(float*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Yaw_Compensation()
</UL>

<P><STRONG><a name="[19f]"></a>PID_INCREMENTAL::Set_Kp_Kd_yaw(float, float)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pid_incremental.o(i._ZN15PID_INCREMENTAL13Set_Kp_Kd_yawEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_INCREMENTAL::Set_Kp_Kd_yaw(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Set_Kp_yaw(float)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Set_Kd_yaw(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd_yaw(float, float)
</UL>

<P><STRONG><a name="[1a3]"></a>PID_INCREMENTAL::Calculate(float)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pid_incremental.o(i._ZN15PID_INCREMENTAL9CalculateEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_INCREMENTAL::Calculate(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::limit(float*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::Calcu_Compensation()
</UL>

<P><STRONG><a name="[1a7]"></a>PID_INCREMENTAL::PID_INCREMENTAL()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pid_incremental.o(i._ZN15PID_INCREMENTALC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_INCREMENTAL::PID_INCREMENTAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::pid(PID_TYPE)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::PatrolLine()
</UL>

<P><STRONG><a name="[251]"></a>PID_INCREMENTAL::PID_INCREMENTAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pid_incremental.o(i._ZN15PID_INCREMENTALC1Ev), UNUSED)

<P><STRONG><a name="[1a8]"></a>PID_INCREMENTAL::~PID_INCREMENTAL()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_incremental.o(i._ZN15PID_INCREMENTALD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::~pid()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::~PatrolLine()
</UL>

<P><STRONG><a name="[252]"></a>PID_INCREMENTAL::~PID_INCREMENTAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid_incremental.o(i._ZN15PID_INCREMENTALD1Ev), UNUSED)

<P><STRONG><a name="[1cc]"></a>Key::Key()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key.o(i._ZN3KeyC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
</UL>

<P><STRONG><a name="[253]"></a>Key::Key__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, key.o(i._ZN3KeyC1Ev), UNUSED)

<P><STRONG><a name="[1bc]"></a>pid::limit(float*, float)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, pid.o(i._ZN3pid5limitEPff))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Calculate(float)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::Calculate_yaw(float)
</UL>

<P><STRONG><a name="[1c2]"></a>pid::Set_Kd(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(i._ZN3pid6Set_KdEf))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::Set_Kp_Kd(float, float)
</UL>

<P><STRONG><a name="[1c1]"></a>pid::Set_Kp(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(i._ZN3pid6Set_KpEf))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::Set_Kp_Kd(float, float)
</UL>

<P><STRONG><a name="[19e]"></a>pid::Set_Kp_Kd(float, float)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pid.o(i._ZN3pid9Set_Kp_KdEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pid::Set_Kp_Kd(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::Set_Kp(float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid::Set_Kd(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::SetPID_Kp_Kd(float, float)
</UL>

<P><STRONG><a name="[1bf]"></a>pid::pid(PID_TYPE)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pid.o(i._ZN3pidC1E8PID_TYPE))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::PID_INCREMENTAL()
</UL>

<P><STRONG><a name="[254]"></a>pid::pid__sub_object(PID_TYPE)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN3pidC1E8PID_TYPE), UNUSED)

<P><STRONG><a name="[1c0]"></a>pid::~pid()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pid.o(i._ZN3pidD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_INCREMENTAL::~PID_INCREMENTAL()
</UL>

<P><STRONG><a name="[255]"></a>pid::~pid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN3pidD1Ev), UNUSED)

<P><STRONG><a name="[186]"></a>Motor::Back_WhiteStraight(short, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor18Back_WhiteStraightEsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor::Back_WhiteStraight(short, int) &rArr; Motor::Speed(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[182]"></a>Motor::Patrol_Distance_Protect(short, int, int, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor23Patrol_Distance_ProtectEsiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor::Patrol_Distance_Protect(short, int, int, int) &rArr; Motor::Speed(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
</UL>

<P><STRONG><a name="[196]"></a>Motor::Patrol_Distance_Protect2(short, int, int, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor24Patrol_Distance_Protect2Esiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor::Patrol_Distance_Protect2(short, int, int, int) &rArr; Motor::Speed(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Speed(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
</UL>

<P><STRONG><a name="[15c]"></a>Motor::Init()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Motor::Init() &rArr; Right_motor::Init() &rArr; Right_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
</UL>

<P><STRONG><a name="[16e]"></a>Motor::Speed(short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, motor.o(i._ZN5Motor5SpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor::Speed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Speed(short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Speed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
</UL>

<P><STRONG><a name="[193]"></a>Motor::Speed(short, short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, motor.o(i._ZN5Motor5SpeedEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor::Speed(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Speed(short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Speed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect2(short, int, int, int)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Patrol_Distance_Protect(short, int, int, int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Back_WhiteStraight(short, int)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>Motor::Enable()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor6EnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor::Enable() &rArr; Right_motor::Enable() &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Enable()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
</UL>

<P><STRONG><a name="[1b7]"></a>Motor::Disable()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motor.o(i._ZN5Motor7DisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Motor::Disable() &rArr; Right_motor::Disable() &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Disable()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Disable()
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
</UL>

<P><STRONG><a name="[1bb]"></a>Motor::Motor()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motor.o(i._ZN5MotorC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::Motor()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::Right_motor()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::Left_motor()
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_motor123
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Distance_patrol()
</UL>

<P><STRONG><a name="[256]"></a>Motor::Motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motor.o(i._ZN5MotorC1Ev), UNUSED)

<P><STRONG><a name="[98]"></a>Motor::~Motor()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor.o(i._ZN5MotorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::~Motor()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_motor::~Right_motor()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_motor::~Left_motor()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::~Distance_patrol()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test.o(i.__sti___8_test_cpp_motor123)
<LI> pack.o(i.__sti___8_pack_cpp_807a1116)
</UL>
<P><STRONG><a name="[257]"></a>Motor::~Motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motor.o(i._ZN5MotorD1Ev), UNUSED)

<P><STRONG><a name="[15e]"></a>Encoder::Encoder_Init()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, encoder.o(i._ZN7Encoder12Encoder_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Encoder_Init() &rArr; HAL_TIM_Encoder_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Init()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Move_Distance(int, float, float)
</UL>

<P><STRONG><a name="[1b6]"></a>Encoder::Encoder_Disable_Clean()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, encoder.o(i._ZN7Encoder21Encoder_Disable_CleanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Encoder::Encoder_Disable_Clean() &rArr; HAL_TIM_Encoder_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
</UL>

<P><STRONG><a name="[1b5]"></a>Encoder::Get_CaptureRightCount()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder21Get_CaptureRightCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Run_Right_Distance(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Get_CalculateSpeed()
</UL>

<P><STRONG><a name="[1ba]"></a>Encoder::Encoder()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encoder.o(i._ZN7EncoderC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Distance_patrol()
</UL>

<P><STRONG><a name="[258]"></a>Encoder::Encoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, encoder.o(i._ZN7EncoderC1Ev), UNUSED)

<P><STRONG><a name="[97]"></a>Encoder::~Encoder()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, encoder.o(i._ZN7EncoderD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::~Distance_patrol()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack.o(i.__sti___8_pack_cpp_807a1116)
</UL>
<P><STRONG><a name="[259]"></a>Encoder::~Encoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, encoder.o(i._ZN7EncoderD1Ev), UNUSED)

<P><STRONG><a name="[17b]"></a>LED_Class::Open()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i._ZN9LED_Class4OpenEv))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[17c]"></a>LED_Class::Close()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i._ZN9LED_Class5CloseEv))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[197]"></a>LED_Class::toggle()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i._ZN9LED_Class6toggleEv))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
</UL>

<P><STRONG><a name="[1cb]"></a>LED_Class::LED_Class(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(i._ZN9LED_ClassC1EP12GPIO_TypeDeft))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_pack_cpp_807a1116
</UL>

<P><STRONG><a name="[25a]"></a>LED_Class::LED_Class__sub_object(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led.o(i._ZN9LED_ClassC1EP12GPIO_TypeDeft), UNUSED)

<P><STRONG><a name="[1c8]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_PatrolLine_cpp_ad_now
</UL>

<P><STRONG><a name="[1c9]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[175]"></a>__Hardware_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pack.o(i.__Hardware_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __Hardware_Handler &rArr; Check_Device() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyroscope_Start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Device()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHardware_Handle
</UL>

<P><STRONG><a name="[15b]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
</UL>

<P><STRONG><a name="[b3]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16f]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLineTest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRobot_Run
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLCD_Show
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHardware_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint1_to_HomePoint2()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_door4_to_loc_5()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_8_to_HomePoint1()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Precipice_to_loc_7()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_HomePoint2_to_Home()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_7_to_loc_8()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_4_to_loc_3()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_2_to_loc_4()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_1_to_loc_2()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door2_to_loc_5()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_loc_5()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_door1_to_door2()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Right(float, unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_3to_door1()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_dir_Pid_Left(float, unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_loc_5to_loc7()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_stop_terrace(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Hit_Spot()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start_2()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Device()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Start()
</UL>

<P><STRONG><a name="[1ce]"></a>osKernelInitialize</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>osKernelStart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>osThreadNew</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1fe]"></a>pvPortMalloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1eb]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d5]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[205]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[211]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1dd]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1ea]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d7]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d6]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d9]"></a>vPortEnterCritical</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1db]"></a>vPortExitCritical</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1e6]"></a>vPortFree</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[208]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[201]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1df]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1f7]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1d0]"></a>vTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[20d]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1fd]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[204]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[203]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1d1]"></a>vTaskStartScheduler</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1f5]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[b9]"></a>vTaskSwitchContext</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[207]"></a>xPortStartScheduler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1de]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1e8]"></a>xQueueGenericReset</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[20b]"></a>xQueueGenericSend</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[20f]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1f2]"></a>xQueueReceive</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[20e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1d3]"></a>xTaskCreate</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[1d2]"></a>xTaskCreateStatic</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[20c]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1f8]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[176]"></a>xTaskIncrementTick</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1e5]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1fc]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f6]"></a>xTaskResumeAll</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[206]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1f0]"></a>xTimerGenericCommand</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[a8]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[25b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[25c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[147]"></a>MPU_Config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>__sti___14_PatrolLine_cpp_ad_now</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, patrolline.o(i.__sti___14_PatrolLine_cpp_ad_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __sti___14_PatrolLine_cpp_ad_now &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patrolline.o(.init_array)
</UL>
<P><STRONG><a name="[9f]"></a>__sti___8_pack_cpp_807a1116</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, pack.o(i.__sti___8_pack_cpp_807a1116))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_pack_cpp_807a1116 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatrolLine::PatrolLine()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Class::LED_Class(GPIO_TypeDef*, unsigned short)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key::Key()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Distance_patrol::Distance_patrol()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_POSITIONAL::PID_POSITIONAL()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack.o(.init_array)
</UL>
<P><STRONG><a name="[a0]"></a>__sti___8_test_cpp_motor123</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test.o(i.__sti___8_test_cpp_motor123))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_test_cpp_motor123 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.init_array)
</UL>
<P><STRONG><a name="[10e]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[120]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[122]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[123]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[124]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[125]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[10d]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[10f]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[8b]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[8d]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[8c]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[e6]"></a>ADC_Init</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[f0]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ef]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f1]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[fc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[108]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[173]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f7xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[174]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f7xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[8e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[12f]"></a>UART_EndRxTransfer</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[134]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[93]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_Address_Set &rArr; LCD_WriteCom &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[1e2]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1e4]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1e7]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[1ed]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1ee]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1fb]"></a>prvUnlockQueue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1d4]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1d8]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1e0]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1e1]"></a>prvDeleteTCB</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[9c]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1e9]"></a>prvInitialiseNewTask</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1da]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[210]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1dc]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1fa]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1ec]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1ef]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1f1]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1f4]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1f3]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1f9]"></a>prvSwitchTimerLists</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[9d]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1ff]"></a>prvHeapInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[200]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[9b]"></a>prvTaskExitError</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[89]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
